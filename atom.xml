<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李二夜&#39;s Blog</title>
  
  <subtitle>李二夜&#39;s blog</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://p2yang.github.io/"/>
  <updated>2020-06-12T09:55:26.000Z</updated>
  <id>http://p2yang.github.io/</id>
  
  <author>
    <name>李二夜</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 精品屏保推荐</title>
    <link href="http://p2yang.github.io/2020/06/12/pictures/"/>
    <id>http://p2yang.github.io/2020/06/12/pictures/</id>
    <published>2020-06-12T09:55:26.000Z</published>
    <updated>2020-06-12T09:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>推荐 2 款精美的 Mac 屏幕保护程序。</p><a id="more"></a><h2 id="Brooklyn"><a href="#Brooklyn" class="headerlink" title="Brooklyn"></a>Brooklyn</h2><p>这是一款开源屏保，项目托管在 <a href="https://github.com/pedrommcarrasco/Brooklyn" target="_blank" rel="noopener">Github 官方仓库</a> 上。效果如下：</p><p><img src="/blog/images/showcase.gif" alt="Brooklyn"></p><p>安装方式参考官方文档。如使用 <a href="https://brew.sh/" target="_blank" rel="noopener"><code>Homebrew</code></a> 安装如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install brooklyn</span><br></pre></td></tr></table></figure><h2 id="Fliqlo"><a href="#Fliqlo" class="headerlink" title="Fliqlo"></a>Fliqlo</h2><p>前往 <a href="https://fliqlo.com/#/screensaver" target="_blank" rel="noopener">fliqlo.com</a> 下载 <code>dmg</code> 包安装即可。</p><p><img src="/blog/images/fliqlo.png" alt="Fliqlo"></p><p><em>注：也支持 Windows.</em></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>打开 <code>系统偏好设置</code> -&gt; <code>桌面与屏幕保护程序</code> -&gt; 选择喜欢的屏保即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;推荐 2 款精美的 Mac 屏幕保护程序。&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://p2yang.github.io/categories/mac/"/>
    
    
      <category term="tool" scheme="http://p2yang.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>HTML 应用 a 标签拨打电话字符问题</title>
    <link href="http://p2yang.github.io/2020/03/05/web-tel/"/>
    <id>http://p2yang.github.io/2020/03/05/web-tel/</id>
    <published>2020-03-05T13:20:33.000Z</published>
    <updated>2020-03-05T13:20:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 HTML 中我们使用 <code>a</code> 标签来拨打电话。有一些特殊字符可能无法带入系统拨号键盘，如 <code>#</code>。</p><a id="more"></a><p>解决方法：对号码进行编码，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:123*312%23"</span>&gt;</span> TEL: 123*312# <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>手机号中带有 <code>#</code>，编码后变成了 <code>%23</code>。<br>在 js 中，可以使用 <code>encodeURIComponent</code> 方法对其进行编码。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 HTML 中我们使用 &lt;code&gt;a&lt;/code&gt; 标签来拨打电话。有一些特殊字符可能无法带入系统拨号键盘，如 &lt;code&gt;#&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://p2yang.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>【实用推荐】npm script 便捷执行工具 - ntl</title>
    <link href="http://p2yang.github.io/2020/02/28/package-ntl/"/>
    <id>http://p2yang.github.io/2020/02/28/package-ntl/</id>
    <published>2020-02-28T04:05:24.000Z</published>
    <updated>2020-02-28T04:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>当 <code>package.json</code> 文件里写了很多 <code>scripts</code> 命令，一时想不起来有哪些怎么办？这里推荐一个 npm package: <code>ntl</code>, 不用打开配置文件, 直接在命令行中列出所有可执行命令，上下选择确认即可执行，非常方便。</p><p><img src="https://ruyadorno.github.io/svg-demos/ntl/examples/option-rerun.svg" alt="ntl"></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ntl -g</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开 <code>~/.bash_profile</code> 新增配置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="built_in">export</span> NTL_RUNNER=yarn</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在项目根目录下执行 <code>ntl</code> 命令即可。</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntl</span><br></pre></td></tr></table></figure><p>其他参数，可查看<a href="https://www.npmjs.com/package/ntl" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当 &lt;code&gt;package.json&lt;/code&gt; 文件里写了很多 &lt;code&gt;scripts&lt;/code&gt; 命令，一时想不起来有哪些怎么办？这里推荐一个 npm package: &lt;code&gt;ntl&lt;/code&gt;, 不用打开配置文件, 直接在命令行中列出所有可执行命令，上下选择确认即可执行，非常方便。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ruyadorno.github.io/svg-demos/ntl/examples/option-rerun.svg&quot; alt=&quot;ntl&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://p2yang.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>使用 fetch 方法下载后端文件</title>
    <link href="http://p2yang.github.io/2020/02/12/fetch-download/"/>
    <id>http://p2yang.github.io/2020/02/12/fetch-download/</id>
    <published>2020-02-12T07:17:34.000Z</published>
    <updated>2020-02-12T07:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 web 页面中使用原生 window.fetch 下载后端文件。</p><a id="more"></a><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><ol><li>fetch url;</li><li>解析 <code>blob</code> 数据;</li><li>从 <code>response header</code> 中解析文件名;</li><li>动态创建 <code>a</code> 标签，利用 <code>download</code> 进行下载;</li><li>将 <code>blob</code> 数据转成 data uri, 赋值给 a href .</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://gist.github.com/p2yang/72f23f5bd808d424f0b18af34f3c95e1" target="_blank" rel="noopener">Gist Code</a><br><!-- download source code --></p><script src="https://gist.github.com/p2yang/72f23f5bd808d424f0b18af34f3c95e1.js"></script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 web 页面中使用原生 window.fetch 下载后端文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://p2yang.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Webpack DllPlugin 基本应用与实践</title>
    <link href="http://p2yang.github.io/2020/01/19/webpack-dll/"/>
    <id>http://p2yang.github.io/2020/01/19/webpack-dll/</id>
    <published>2020-01-19T14:37:31.000Z</published>
    <updated>2020-01-19T14:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Webpack</code> 内置插件 <code>DllPlugin</code> 可以将一些较长时间内、稳定不变的包或组件拆分出来，以 <code>script</code> 外链的形式引入页面，以减少 <code>webpack</code> 打包时间，长期缓存。本文记录了 Webpack 内置插件 <code>DllPlugin</code> 基本应用方法。</p><a id="more"></a><p>本文环境以 <a href="mailto:`webpack@4.x" target="_blank" rel="noopener">`webpack@4.x</a><code>+</code><a href="mailto:node@10.x" target="_blank" rel="noopener">node@10.x</a>` 为主，应用分 3 步：</p><ol><li>单独打包 <code>dll</code> 相关文件；</li><li>引入 <code>webpack</code> 配置；</li><li>插入外链；</li></ol><h2 id="单独打包-dll-相关文件；"><a href="#单独打包-dll-相关文件；" class="headerlink" title="单独打包 dll 相关文件；"></a>单独打包 <code>dll</code> 相关文件；</h2><p>新建 <code>webpack</code> 配置文件 <code>webpack.dll.js</code>，添加 <code>dll</code> 相关文件打包配置，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'production'</span> : <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [</span><br><span class="line">      <span class="string">'vue'</span>,</span><br><span class="line">      <span class="string">'vue-router'</span>,</span><br><span class="line">      <span class="string">'vuex'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'static/lib'</span>),</span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">'[name]_[hash]'</span>,</span><br><span class="line">      path: path.join(__dirname, <span class="string">'.'</span>, <span class="string">'[name]_manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>package.json</code> scripts 中添加命令:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build:dll"</span>: <span class="string">"webpack --config dll/webpack.dll.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置好后，执行命令：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm run build:dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">yarn build:dll</span><br></pre></td></tr></table></figure><p>这里会将我们选取 vue 三件套打包出来(Github示例地址请看下文)，生成以下两个文件：</p><ul><li><code>vendor_manifest.json</code>: dll 配置文件，需要在 <code>webpack</code> 主配置文件中引入；</li><li><code>vendor.dll.js</code>: 目标依赖整合文件，最后需要外链。</li></ul><p>下面，来看下这两个文件的使用吧。</p><h2 id="使用-webpack-DllReferencePlugin-引入-webpack-主配置；"><a href="#使用-webpack-DllReferencePlugin-引入-webpack-主配置；" class="headerlink" title="使用 webpack.DllReferencePlugin 引入 webpack 主配置；"></a>使用 <code>webpack.DllReferencePlugin</code> 引入 <code>webpack</code> 主配置；</h2><p>在 <code>webpack</code> 主配置文件中引入 <code>vendor_manifest.json</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// ...此处省略其他配置</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      context: __dirname,</span><br><span class="line">      manifest: <span class="built_in">require</span>(<span class="string">'./vendor_manifest.json'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入外链；"><a href="#插入外链；" class="headerlink" title="插入外链；"></a>插入外链；</h2><p>直接在 html 入口文件中引入。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/lib/vendor.dll.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动本地服务看看吧。</p><p>注：可使用 <a href="https://www.npmjs.com/package/anywhere" target="_blank" rel="noopener"><code>anywhere</code></a> 或者 <a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener"><code>http-server</code></a> 快速启动本地静态服务器。</p><h2 id="Github-示例"><a href="#Github-示例" class="headerlink" title="Github 示例"></a>Github 示例</h2><p><a href="https://github.com/p2yang/webpack-examples/tree/master/dll" target="_blank" rel="noopener">Github 示例</a><br><a href="http://blog.p2yang.com" target="_blank" rel="noopener">个人博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 内置插件 &lt;code&gt;DllPlugin&lt;/code&gt; 可以将一些较长时间内、稳定不变的包或组件拆分出来，以 &lt;code&gt;script&lt;/code&gt; 外链的形式引入页面，以减少 &lt;code&gt;webpack&lt;/code&gt; 打包时间，长期缓存。本文记录了 Webpack 内置插件 &lt;code&gt;DllPlugin&lt;/code&gt; 基本应用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://p2yang.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Google Tag Manager 实用自定义 Variable 和 Trigger</title>
    <link href="http://p2yang.github.io/2020/01/16/gtm-variables/"/>
    <id>http://p2yang.github.io/2020/01/16/gtm-variables/</id>
    <published>2020-01-16T14:19:47.000Z</published>
    <updated>2020-01-16T14:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>单独为每个埋点建立一个个 Tag 和 Trigger, 未免太过麻烦。这里记录几个实用的自定义变量，以提高效率。</p><a id="more"></a><p>Google Tag Manager 支持多种类型的自定义变量，前端同学可自行选择使用哪些。</p><h2 id="根据-CSS-Selector-获取目标元素"><a href="#根据-CSS-Selector-获取目标元素" class="headerlink" title="根据 CSS Selector 获取目标元素"></a>根据 CSS Selector 获取目标元素</h2><p>设置变量名为 <code>Find Closest</code>, 变量类型为 <code>Custom JavaScript</code>, 脚本内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!target.matches(selector) &amp;&amp; !target.matches(<span class="string">'body'</span>)) &#123;</span><br><span class="line">      target = target.parentElement;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target.matches(selector) ? target : <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/images/gtm/gtm2-variable.png" alt="GTM Variable"></p><p>下面会有具体应用。</p><h2 id="自定义-GA-Event-Category-Event-Label-变量"><a href="#自定义-GA-Event-Category-Event-Label-变量" class="headerlink" title="自定义 GA Event Category / Event Label 变量"></a>自定义 GA Event Category / Event Label 变量</h2><p>在关联配置 GA 的 Event track 类型中，可以使用变量，而不用把值写死。同样是先命名变量，设置变量类型为 <code>Custom JavaScript</code>。<br>脚本内容示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> el = &#123;&#123;Find Closest&#125;&#125;(&#123;&#123;Click Element&#125;&#125;, <span class="string">'[data-label]'</span>);</span><br><span class="line"><span class="keyword">return</span> el ? el.dataset.label : <span class="string">''</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚本中出现的 <code>\{\{Find Closest\}\}</code> 就是上面自定义的变量 <code>Find Closest</code>，双大括号是调用取值语法。<br>不同的是，<code>\{\{Click Element\}\}</code> 是 Google Tag Manager 内置变量，表示被点击的 DOM 元素。<br><code>selector</code> 可自行改写。</p><p>该变量的作用是获取到被点击目标元素上的 <code>data-label</code> 值，没有则返回空字符串。</p><h2 id="自定义-Data-Layer-变量"><a href="#自定义-Data-Layer-变量" class="headerlink" title="自定义 Data Layer 变量"></a>自定义 Data Layer 变量</h2><p>如果需要手动上报的话，这里可以新建一个 <code>Data Layer Variable</code> 类型的变量，所定义的值可以被 <code>window.dataLayer</code> 上报。示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：此处代码需要在自己的页面中添加</span></span><br><span class="line"><span class="built_in">window</span>.dataLayer.push(&#123;</span><br><span class="line"><span class="string">'event'</span>: <span class="string">'track_custom_event'</span>,</span><br><span class="line"><span class="string">'xxx'</span>: <span class="string">'待上报的值'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中 <code>xxx</code> 即为此处需要定义的 Data Layer Variable Name。</p><p>再建立一个自定义事件变量，变量类型选 <code>Custom Event</code>。</p><p>然后，可以建一个 <code>Custom Event</code> 类型的 Trigger 来响应手动上报事件。<br>其中 Event Name 可使用正则表达式，如：<code>[A-Z0-9_]+</code>。<br>注意，需要加一条匹配规则，用来排除官方的事件类型 - <code>gtm</code>，示图如下：</p><p><img src="/blog/images/gtm/gtm2-trigger.png" alt="GTM Trigger"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单独为每个埋点建立一个个 Tag 和 Trigger, 未免太过麻烦。这里记录几个实用的自定义变量，以提高效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Google Tag Manager" scheme="http://p2yang.github.io/tags/Google-Tag-Manager/"/>
    
  </entry>
  
  <entry>
    <title>Google Tag Manager 基本应用与实践</title>
    <link href="http://p2yang.github.io/2020/01/15/gtm-basic/"/>
    <id>http://p2yang.github.io/2020/01/15/gtm-basic/</id>
    <published>2020-01-15T08:05:36.000Z</published>
    <updated>2020-01-15T08:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果想了解网站用户的互动情况，我们该怎么统计？</p><p>国际站的话可以选用 Google 家的 <code>gtag.js</code>, <code>analytics.js</code>，或者 <code>gtm.js</code> 进行开发。前两个的功能和使用方式基本一致，具体差别可参考下方的开发文档。<code>gtm.js</code> 就是本文要说的 Google Tag Manager 的 js 库。</p><a id="more"></a><p>Google Tag Manager (下文简称 “GTM”) 功能齐全，支持 Google 代码和第三方代码。相比于 <code>gtag.js</code> 和 <code>analytics.js</code> 代码侵入性更小，也是 Google 推荐使用的工具。</p><p>话不多说，开始正文。</p><h2 id="1-注册-Container"><a href="#1-注册-Container" class="headerlink" title="1. 注册 Container"></a>1. 注册 Container</h2><p>填好容器名，选择应用平台。容器名建议以应用平台来命名，这里我使用的是域名 <code>blog.p2yang.com</code>。</p><p><img src="/blog/images/gtm/gtm-container.png" alt="GTM Container"></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>注册完成后，会自动分配一个 <code>id</code>, 并且弹窗提示安装方法，将代码片段插入自己的页面即可。<br>页面加载时，会异步请求 <code>gtm.js</code> 库和相关配置，并且提供了浏览器禁止 js 脚本的弥补方法。</p><p>这里摘录下代码段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Google Tag Manager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">(<span class="function"><span class="keyword">function</span>(<span class="params">w,d,s,l,i</span>)</span>&#123;w[l]=w[l]||[];w[l].push(&#123;<span class="string">'gtm.start'</span>:</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime(),<span class="attr">event</span>:<span class="string">'gtm.js'</span>&#125;);<span class="keyword">var</span> f=d.getElementsByTagName(s)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">j=d.createElement(s),dl=l!=<span class="string">'dataLayer'</span>?<span class="string">'&amp;l='</span>+l:<span class="string">''</span>;j.async=<span class="literal">true</span>;j.src=</span></span><br><span class="line"><span class="javascript"><span class="string">'https://www.googletagmanager.com/gtm.js?id='</span>+i+dl;f.parentNode.insertBefore(j,f);</span></span><br><span class="line"><span class="javascript">&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'dataLayer'</span>,<span class="string">'GTM-NLZZ7XB'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End Google Tag Manager --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Google Tag Manager (noscript) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://www.googletagmanager.com/ns.html?id=GTM-TFMV3HS"</span></span></span><br><span class="line"><span class="tag"><span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"display:none;visibility:hidden"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- End Google Tag Manager (noscript) --&gt;</span></span><br></pre></td></tr></table></figure><p>下一步，我们就可以针对性地进行埋点了。</p><h2 id="3-建-Tag"><a href="#3-建-Tag" class="headerlink" title="3. 建 Tag"></a>3. 建 Tag</h2><p>这里是有 Google Analytics（以下称 GA） 处理和分析统计的数据，选择 <code>Google Analytics: Universal Analytics</code> 新建 Tag，如下图：<br><img src="/blog/images/gtm/gtm-tag.png" alt="GTM Tag"></p><h3 id="3-1-关联-GA-配置"><a href="#3-1-关联-GA-配置" class="headerlink" title="3.1 关联 GA 配置"></a>3.1 关联 GA 配置</h3><p>选择 <code>Track Type</code> 选择 <code>Event</code>; <code>Category</code>, <code>Action</code>, <code>Label</code> 的值便于识别即可，<code>Value</code> 建议填 <code>1</code>, 作为单词统计的基数。<br><img src="/blog/images/gtm/gtm-tag-config.png" alt="GTM Tag Config"></p><h3 id="3-2-新建变量"><a href="#3-2-新建变量" class="headerlink" title="3.2 新建变量"></a>3.2 新建变量</h3><p>然后，需要关联到 GA, 选择 <code>New Variable</code>, 配置 GA 的 Tracking ID （可在 <a href="https://analytics.google.com" target="_blank" rel="noopener">https://analytics.google.com</a> 个人管理中找到）。<br>变量创建一次后可以在侧边栏 <code>Variables</code> 进行管理。<br><img src="/blog/images/gtm/gtm-tag-variable.png" alt="GTM Variable for GA"></p><p>命名，保存。</p><h2 id="4-建-Trigger"><a href="#4-建-Trigger" class="headerlink" title="4. 建 Trigger"></a>4. 建 Trigger</h2><p>创建好 Tag 后需要关联 Trigger。举个例子，我想统计阅读 <code>Google Tag Manager</code> 相关文章的 PV 总数，可以选择 <code>Page View</code> 类型的 <code>Track Type</code>, 然后添加一个触发规则，示图如下：</p><p><img src="/blog/images/gtm/gtm-trigger.png" alt="GTM Trigger"></p><p>追踪类型、触发规则要容易区分我们想要统计的页面或者操作。这个以后再讲。</p><h2 id="5-Preview-调试"><a href="#5-Preview-调试" class="headerlink" title="5. Preview 调试"></a>5. Preview 调试</h2><p>Tag, Trigger 配置好后，可以点击 “Preview” 开启 Debug 模式进行本地预览。</p><p>预览：<br><img src="/blog/images/gtm/gtm-preview.png" alt="GTM Preview"></p><p>本地 Debug 触发的 Trigger &amp; Tag:<br><img src="/blog/images/gtm/gtm-debug.png" alt="GTM Debug"></p><p>上报的 Tag 信息：<br><img src="/blog/images/gtm/gtm-debug2.png" alt="GTM Debug 2"></p><p>GA 统计到的数据：<br><img src="/blog/images/gtm/ga-event.png" alt="GA"></p><p>调试 OK，推出 Debug，准备发布。</p><h2 id="6-发布"><a href="#6-发布" class="headerlink" title="6. 发布"></a>6. 发布</h2><p>Google Tag Manager 提供了便捷的版本管理功能，填写好发布信息提交吧。</p><p>以上，就是一次 GTM 基本应用配置了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Google Tag Manager 中 Tag 和 Trigger 提供的功能十分丰富，需要根据我们自身的统计需求选择配置。<br>开始或许很复杂，熟悉之后就很方便快捷了，试试看吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果想了解网站用户的互动情况，我们该怎么统计？&lt;/p&gt;
&lt;p&gt;国际站的话可以选用 Google 家的 &lt;code&gt;gtag.js&lt;/code&gt;, &lt;code&gt;analytics.js&lt;/code&gt;，或者 &lt;code&gt;gtm.js&lt;/code&gt; 进行开发。前两个的功能和使用方式基本一致，具体差别可参考下方的开发文档。&lt;code&gt;gtm.js&lt;/code&gt; 就是本文要说的 Google Tag Manager 的 js 库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Google Tag Manager" scheme="http://p2yang.github.io/tags/Google-Tag-Manager/"/>
    
  </entry>
  
  <entry>
    <title>Webhooks - 网站自动化部署实践</title>
    <link href="http://p2yang.github.io/2019/03/18/webhooks-deploy/"/>
    <id>http://p2yang.github.io/2019/03/18/webhooks-deploy/</id>
    <published>2019-03-18T07:10:03.000Z</published>
    <updated>2019-03-20T03:17:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了使用 <code>Github</code> 的 <code>Webhooks</code> 进行网站自动化部署的实践步骤。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们将项目代码托管到 Github 上，为方便服务端更新网站代码，启用 Webhooks 来实现更新服务。</p><p>整个过程分为 4 步：</p><ol><li>自动化 Shell 脚本更新代码;</li><li>Node Server 监听 webhook push 事件;</li><li>pm2 守护 Server 进程</li><li>配置 Github webhooks.</li></ol><p>配置所需：</p><ul><li>shell 脚本</li><li>Node Server</li><li>github-webhook-handler</li><li>pm2</li></ul><h2 id="自动化-Shell-脚本"><a href="#自动化-Shell-脚本" class="headerlink" title="自动化 Shell 脚本"></a>自动化 Shell 脚本</h2><blockquote><p>该脚本的目的是在目标服务器上 pull 远程代码以实现迭代更新。</p></blockquote><p>当我们在本地开发测试后，将代码 push 到 Github 上，会触发已配置好的 Webhooks，在目标服务器上执行这段 Shell 脚本。<br>我们在项目 root 目录下创建 <code>deploy.sh</code> 文件，添加以下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /www/learning-handbook</span><br><span class="line"></span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git clean -f</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p>实现了 Shell 脚本后，我们需要提供一个 Server 给 Webhooks 调用它。</p><h2 id="Node-Server-实现更新服务"><a href="#Node-Server-实现更新服务" class="headerlink" title="Node Server 实现更新服务"></a>Node Server 实现更新服务</h2><p>接下来，我们通过 <code>Nodejs</code> 创建一个 Server 来实现更新服务。<br>这里我们需要借助 <code>github-webhook-handler</code> 来监听 Github webhooks 的 <code>push</code> 请求，请求成功后通过 <code>child_process</code> 执行上面的 Shell 脚本，就能在服务器上获取更新了。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>同样，在项目 root 下创建 <code>webhook.js</code> 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="keyword">const</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面这个 secret 是你在 github webhook 里设置的 secret 值</span></span><br><span class="line"><span class="keyword">const</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/deploy'</span>, <span class="attr">secret</span>: <span class="string">'xxx'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">6666</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  handler(req, res, err =&gt; &#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(PORT)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听到push事件的时候执行我们的自动化脚本</span></span><br><span class="line">handler.on(<span class="string">'push'</span>, event =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref)</span><br><span class="line">  runCommand(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>], <span class="built_in">console</span>.log)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runCommand</span>(<span class="params"> cmd, args, callback </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="string">''</span></span><br><span class="line">    <span class="keyword">const</span> child = spawn( cmd, args )</span><br><span class="line">    child.stdout.on(<span class="string">'data'</span>, buffer =&gt; &#123; response += buffer.toString() &#125;)</span><br><span class="line">    child.stdout.on(<span class="string">'end'</span>, () =&gt; callback(response))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h3><p>配置 nginx 反向代理 <code>/deploy</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> handbook.p2yang.com;</span><br><span class="line">    ···</span><br><span class="line">    <span class="attribute">location</span> /deploy &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:6666;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-Webhook"><a href="#配置-Webhook" class="headerlink" title="配置 Webhook"></a>配置 Webhook</h2><p>Webhooks 在 Github 项目的 <code>Settings</code> 里。进入其中添加一个新的 webhook，如下图：</p><p><img src="/blog/images/github-webhook.png" alt="Github webhooks"></p><p>注意，由于我们上面使用的 <code>github-webhook-handler</code> 要求 <code>Content type</code> 必须设置成 <code>application/json</code>。<br><code>Payload URL</code> 和 <code>Secret</code> 值与 Server 配置需要保持一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/deploy'</span>, <span class="attr">secret</span>: <span class="string">'xxx'</span> &#125;)</span><br></pre></td></tr></table></figure><p>当服务全部配置成功后，webhook 的状态如下:</p><p><img src="/blog/images/github-webhook-status.png" alt="Github webhook push status"></p><h2 id="初次部署"><a href="#初次部署" class="headerlink" title="初次部署"></a>初次部署</h2><p>第一次部署，需要先在目标服务器上 git clone 下项目代码。</p><h2 id="pm2-守护"><a href="#pm2-守护" class="headerlink" title="pm2 守护"></a>pm2 守护</h2><p>这里使用 <code>pm2</code> 来守护 Server 更新服务。基本用法如下：</p><h3 id="首先全局安装-pm2"><a href="#首先全局安装-pm2" class="headerlink" title="首先全局安装 pm2:"></a>首先全局安装 <code>pm2</code>:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务:"></a>启动服务:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure><h3 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 <span class="built_in">log</span> [服务名或服务id]</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop</span><br><span class="line">pm2 restart</span><br><span class="line">pm2 delete</span><br></pre></td></tr></table></figure><p>大功告成！</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>能自动的就自动吧，我们的时间可以花在更有趣的事情上！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录了使用 &lt;code&gt;Github&lt;/code&gt; 的 &lt;code&gt;Webhooks&lt;/code&gt; 进行网站自动化部署的实践步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://p2yang.github.io/categories/web/"/>
    
    
      <category term="git" scheme="http://p2yang.github.io/tags/git/"/>
    
      <category term="node" scheme="http://p2yang.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Node 图片绘制及合成介绍</title>
    <link href="http://p2yang.github.io/2019/01/17/node-draw-image/"/>
    <id>http://p2yang.github.io/2019/01/17/node-draw-image/</id>
    <published>2019-01-17T02:14:09.000Z</published>
    <updated>2019-01-17T02:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍 Node 图片绘制及合成的一些方式，不涉及图表相关。</p><a id="more"></a><h2 id="实践方式"><a href="#实践方式" class="headerlink" title="实践方式"></a>实践方式</h2><ol><li><p>node-canvas - 类前端<br> 这里说的 canvas 是 web canvas 的 node 实现。其 api 与 web canvas 高度相似。</p><p> 安装：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install canvas</span><br></pre></td></tr></table></figure></li><li><p>gm - node<br> <code>gm</code> 是通过 node 调用 <code>GraphicsMagick</code> 和 <code>ImageMagick</code> 来实现绘图功能的。其中，GraphicsMagick “短小精悍”，号称是“图像处理领域的瑞士军刀”, 是从 ImageMagick 5.2.2 中独立出来的。<br> <code>gm</code> 支持链式调用，基本功能类似 canvas api，但更强大。可查看官方文档深入研究。</p><p> 使用方法：</p><h4 id="1-下载-GraphicsMagick-和-ImageMagick"><a href="#1-下载-GraphicsMagick-和-ImageMagick" class="headerlink" title="(1) 下载 GraphicsMagick 和 ImageMagick"></a>(1) 下载 GraphicsMagick 和 ImageMagick</h4><p> Mac 上可以直接直接使用 <code>Homebrew</code> 下载安装：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install imagemagick</span><br><span class="line">brew install graphicsmagick</span><br></pre></td></tr></table></figure><h4 id="2-安装-gm"><a href="#2-安装-gm" class="headerlink" title="(2) 安装 gm"></a>(2) 安装 gm</h4> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gm</span><br></pre></td></tr></table></figure><h4 id="3-基本使用"><a href="#3-基本使用" class="headerlink" title="(3) 基本使用"></a>(3) 基本使用</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gm = <span class="built_in">require</span>(<span class="string">'gm'</span>)</span><br><span class="line">gm(<span class="string">'/path/to/img.jpg'</span>)</span><br><span class="line">.font(<span class="string">'/path/to/font.ttc'</span>) <span class="comment">// 字体文件</span></span><br><span class="line">       .fontSize(<span class="number">70</span>)</span><br><span class="line">       .fill(<span class="string">'#ffe600'</span>)</span><br><span class="line">       .drawText(<span class="number">0</span>, <span class="number">70</span>, <span class="string">'Hello'</span>)</span><br><span class="line">       .resize(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">.write(<span class="string">'/path/to/resize.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) <span class="built_in">console</span>.log(<span class="string">'done'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="一些有意思的-Package"><a href="#一些有意思的-Package" class="headerlink" title="一些有意思的 Package"></a>一些有意思的 Package</h3><ul><li><a href="https://github.com/d3/d3" target="_blank" rel="noopener">d3</a></li><li><a href="https://github.com/liabru/matter-js" target="_blank" rel="noopener">matter-js</a></li><li><a href="https://github.com/a-jie/Proton" target="_blank" rel="noopener">Proton</a></li><li><a href="http://paperjs.org" target="_blank" rel="noopener">Paper.js</a></li><li><a href="https://github.com/spritejs/spritejs" target="_blank" rel="noopener">sprite.js</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/Automattic/node-canvas" target="_blank" rel="noopener">node-canvas</a></li><li><a href="https://github.com/aheckmann/gm" target="_blank" rel="noopener">gm</a></li><li><a href="http://www.graphicsmagick.org/" target="_blank" rel="noopener">GraphicsMagick</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍 Node 图片绘制及合成的一些方式，不涉及图表相关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://p2yang.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>iOS Simulator 模拟器 - web 页面调试实践</title>
    <link href="http://p2yang.github.io/2018/11/06/simulator-dev/"/>
    <id>http://p2yang.github.io/2018/11/06/simulator-dev/</id>
    <published>2018-11-06T08:06:40.000Z</published>
    <updated>2018-11-06T08:06:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>低版本 iOS safari 如何调试？在真机难求的情况下，可以用 Mac <code>iOS Simulator</code> 进行调试。</p><a id="more"></a><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li><p>安装下载 Xcode<br> 在 App Store 中搜索 Xcode 下载安装。</p><p> 说明：本文基于 Xcode 10.1 创作。</p></li><li><p>打开 Simulator<br> 依次选择菜单栏: <code>Xcode -&gt; Open Developer Tool -&gt; Simulator</code>，如图：</p><p> <img src="/blog/images/simulator/open.png" alt></p><p> 经过初始化后，出现如下界面:</p><p> <img src="/blog/images/simulator/device.png" alt></p><p> 可以打开菜单栏: <code>Hardware -&gt; Device</code> 选择切换成你想要的系统版本、设备类型。</p></li><li><p>调试<br> 我们用 Mac 上的 Safari 开发者工具进行调试。</p><p> 首先打开 Simulator 中的 Safari, 访问目标 web 页面。</p><p> 然后打开 mac 上的 Safari，选择 <code>开发 -&gt; 模拟器 -&gt; 目标url</code> 即可打开对应的开发者工具进行调试。<br> （如没有<code>开发</code>菜单，请从 Safari 偏好设置里启用此功能。）</p><p> <img src="/blog/images/simulator/dev.png" alt></p></li><li><p>选择系统版本<br> 默认的 Simulator 支持的 iOS 版本只有一个，此时，我们需要手动到 Xcode 里下载想要的 iOS 版本。</p><p> 依次打开 <code>Xcode -&gt; Preferences -&gt; Components</code> ，下载目标版本，完成之后重新打开 Simulator，就能从 <code>Hardware</code> 里进行切换了。</p><p> <img src="/blog/images/simulator/components.png" alt></p></li></ol><p>以上，就是用 iOS Simulator 调试的基本过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;低版本 iOS safari 如何调试？在真机难求的情况下，可以用 Mac &lt;code&gt;iOS Simulator&lt;/code&gt; 进行调试。&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://p2yang.github.io/categories/Tool/"/>
    
      <category term="ios" scheme="http://p2yang.github.io/categories/Tool/ios/"/>
    
    
      <category term="Tool" scheme="http://p2yang.github.io/tags/Tool/"/>
    
      <category term="ios" scheme="http://p2yang.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Canvas 跨域脱坑实践</title>
    <link href="http://p2yang.github.io/2018/11/02/canvas-to-img/"/>
    <id>http://p2yang.github.io/2018/11/02/canvas-to-img/</id>
    <published>2018-11-02T06:35:29.000Z</published>
    <updated>2018-11-02T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Canvas</code> 跨域如何解决？这里记录下使用 <code>Canvas</code> 绘图过程中所遇到的跨域问题和解决方案。</p><p>先来看下实现方法。</p><a id="more"></a><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>目标图片一般是由 图片 + 文本 构成。无论是千奇百怪的大小图片，还是变幻莫测的各式文本，都能用 <code>canvas</code> api <code>drawImage</code> 和 <code>fillText</code> 方法来完成。</p><p>基本流程如下:</p><ol><li><p>获取 <code>canvas</code> 上下文 – <code>ctx</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(selector)</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br></pre></td></tr></table></figure></li><li><p>绘图<br>忽略图片上的内容，直接用 <code>drawImage</code> 将其画到 <code>canvas</code> 画布上即可。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">image.src = src</span><br><span class="line">image.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">ctx.save()</span><br><span class="line"><span class="comment">// 这里我们采用以下参数调用</span></span><br><span class="line"><span class="keyword">this</span>.ctx.drawImage(image, dx, dy, dWidth, dHeight)</span><br><span class="line"><span class="keyword">this</span>.ctx.restore()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>drawImage</code> 有3种参数使用方式，具体用法可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noopener">MDN 文档</a>。</p></li><li><p>获取图像数据<br>调用 <code>HTMLCanvasElement</code> DOM 对象提供的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 方法，即可。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">canvas.toBlob(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 你要的 blob</span></span><br><span class="line">&#125;, mimeType, encoderOptions)</span><br></pre></td></tr></table></figure><p> 这里的 <code>mimeType</code> 默认值为 <code>image/png</code>。<code>encoderOptions</code> 指定了图片质量，可用于压缩，不过需要 <code>mimeType</code> 格式为 <code>image/jpeg</code> 或者 <code>image/webp</code>。</p></li></ol><h2 id="Canvas-跨域"><a href="#Canvas-跨域" class="headerlink" title="Canvas 跨域"></a>Canvas 跨域</h2><p>正常情况下，如果需要将绘制好的图像输出，我们可以调用 <code>canvas</code> 的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 方法来获取到图像数据。然而，遇到图片跨域的情况就有些尴尬了。可能回报如下错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute &apos;toBlob&apos; on &apos;HTMLCanvasElement&apos;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to image at &apos;https://your.image.src&apos; from origin &apos;https://your.website&apos; has been blocked by CORS policy: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>先来看看第2种情况。</p><ul><li><p><code>Access-Control-Allow-Origin</code><br>  如果你跨域使用某些图片资源，并且该服务未正确响应 <code>Access-Control-Allow-Origin</code> 头信息, 则会报出如下错误信息:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to image at &apos;https://your.image.src&apos; from origin &apos;https://your.website&apos; has been blocked by CORS policy: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>  说明不允许跨域访问，那么你可以试着让后台修改 <code>Access-Control-Allow-Origin</code> 的值为 <code>*</code> 或 <code>your.website</code>, 或者改用同域资源（考虑下？）。</p></li></ul><p>接下来，我们来解决第1种情况。</p><ul><li><p><code>img.crossOrigin = &#39;Anonymous&#39;</code><br>  为避免未经许可拉取远程网站信息而导致的用户隐私泄露（如 GPS 等信息，具体可搜索 Exif），在调用 <code>canvas</code> 的 <code>toBlob()</code>, <code>toDataURL()</code> 或 <code>getImageData()</code> 会抛出安全错误:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to execute &apos;toBlob&apos; on &apos;HTMLCanvasElement&apos;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure><p>  如果你的图片服务允许跨域使用（如果不允许，见上条），那么你该考虑下给 img 元素加上 <code>crossOrigin</code> 属性，即：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> image = <span class="keyword">new</span> Image()</span><br><span class="line">image.crossOrigin = <span class="string">'Anonymous'</span></span><br><span class="line">image.src = src</span><br></pre></td></tr></table></figure></li></ul><p>如此，你便可以拿到图片数据了。如果没招，换同域资源吧～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Canvas&lt;/code&gt; 跨域如何解决？这里记录下使用 &lt;code&gt;Canvas&lt;/code&gt; 绘图过程中所遇到的跨域问题和解决方案。&lt;/p&gt;
&lt;p&gt;先来看下实现方法。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://p2yang.github.io/categories/web/"/>
    
    
      <category term="Canvas" scheme="http://p2yang.github.io/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>Google Robots</title>
    <link href="http://p2yang.github.io/2018/09/12/google-robots/"/>
    <id>http://p2yang.github.io/2018/09/12/google-robots/</id>
    <published>2018-09-12T11:33:04.000Z</published>
    <updated>2018-09-13T08:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果不想 Google 爬虫抓取某个页面，可以考虑添加 <code>robots.txt</code> 文件进行选择性屏蔽。</p><blockquote><p><code>robots.txt</code> 文件位于您网站的根目录下，用于表明您不希望搜索引擎抓取工具访问您网站上的哪些内容。— Google</p></blockquote><a id="more"></a><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>将 <code>robots.txt</code> 添加到网站根目录下，示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /particles</span><br><span class="line">Allow: /</span><br><span class="line"></span><br><span class="line"># 本站暂时还未添加 sitemap</span><br><span class="line"># Sitemap: http://www.p2yang.com/sitemap.xml</span><br></pre></td></tr></table></figure></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>robots.txt 文件中使用了以下关键字：</p><ul><li>User-agent：[必需，每条规则需要一个或多个] 此条规则所要应用到的搜索引擎“漫游器”（即网页抓取工具软件）的名称。Web Robots Database 和 Google 用户代理列表中列出了大多数用户代理名称。支持使用星号 (*) 通配符表示路径前缀、后缀或整个字符串。像下例中那样使用星号 (*) 可匹配所有抓取工具（各种 AdsBot 抓取工具除外，此类抓取工具必须明确指定）。（查看 Google 抓取工具名称列表。）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Block all but AdsBot crawlers</span><br><span class="line">User-agent: *</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>Disallow：[每条规则需要至少一个或多个 Disallow 或 Allow 条目] 用户代理不应抓取的目录或网页（以相对于根网域的路径表示）。如果要指定网页，就应提供浏览器中显示的完整网页名称；如果要指定目录，则应以 / 标记结尾。支持使用星号 (*) 通配符表示路径前缀、后缀或整个字符串。</li><li>Allow：[每条规则需要至少一个或多个 Disallow 或 Allow 条目] 上文中提到的用户代理应抓取的目录或网页（以相对于根网域的路径表示）。此指令用于替换 Disallow 指令，从而允许抓取已禁止访问的目录中的子目录或网页。如果要指定网页，就应提供浏览器中显示的完整网页名称；如果要指定目录，则应以 / 标记结尾。支持使用星号 (*) 通配符表示路径前缀、后缀或整个字符串。</li></ul></blockquote><blockquote><ul><li>Sitemap：[可选，每个文件可包含零个或多个] 相应网站的站点地图的位置。此行不是必需的，您可酌情指定多个站点地图，并使用换行符分隔各个站点地图。站点地图是一种用于指示 Google 应抓取哪些内容的理想方式，但并不用于指示 Google 可以抓取或不能抓取哪些内容。详细了解站点地图。</li></ul></blockquote><h3 id="有效性测试"><a href="#有效性测试" class="headerlink" title="有效性测试"></a>有效性测试</h3><p>发布后可使用官方提供的<a href="https://support.google.com/webmasters/answer/6062598?hl=zh-Hans&amp;ref_topic=6061961" target="_blank" rel="noopener">工具</a>进行测试。</p><p>实际效果如下：<br><img src="/blog/images/google-robots.png" alt></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://support.google.com/webmasters/answer/6062596?hl=zh-Hans&amp;ref_topic=6061961" target="_blank" rel="noopener">Google官方文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果不想 Google 爬虫抓取某个页面，可以考虑添加 &lt;code&gt;robots.txt&lt;/code&gt; 文件进行选择性屏蔽。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;robots.txt&lt;/code&gt; 文件位于您网站的根目录下，用于表明您不希望搜索引擎抓取工具访问您网站上的哪些内容。— Google&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://p2yang.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>webpack profile 文件分析功能</title>
    <link href="http://p2yang.github.io/2018/07/25/webpack-profile-stats/"/>
    <id>http://p2yang.github.io/2018/07/25/webpack-profile-stats/</id>
    <published>2018-07-25T02:27:47.000Z</published>
    <updated>2018-07-25T02:27:47.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 实用插件</title>
    <link href="http://p2yang.github.io/2018/05/21/sublime-text-plugins/"/>
    <id>http://p2yang.github.io/2018/05/21/sublime-text-plugins/</id>
    <published>2018-05-21T11:04:05.000Z</published>
    <updated>2018-05-21T11:04:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对 Sublime Text 编辑器一些实用插件的总结，可以参考下。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>想装插件，请先开启 <code>Package Control</code>, 网上教程很多，本文不做赘述。</p><p>所有支持的插件可以从<a href="https://packagecontrol.io/" target="_blank" rel="noopener">packagecontrol.io</a>上找到。</p><h2 id="Sync-Settings-–-配置云同步"><a href="#Sync-Settings-–-配置云同步" class="headerlink" title="Sync Settings – 配置云同步"></a>Sync Settings – 配置云同步</h2><p>最简单的、省事儿、安全的方法当然是“拿来主义”了。这个插件可以将你的配置上传到<a href="https://gist.github.com/" target="_blank" rel="noopener"><code>Gist</code></a>上，也可以将<code>Gist</code>上的配置同步到本地。也就是说，你可以直接获取别人分享的配置。注意这些配置包括了插件、快捷键、个性化配置等。</p><h2 id="SideBarEnhancements-–-侧边栏增强"><a href="#SideBarEnhancements-–-侧边栏增强" class="headerlink" title="SideBarEnhancements – 侧边栏增强"></a>SideBarEnhancements – 侧边栏增强</h2><p>默认的侧边栏功能极简，使用该插件应该能满足需求。</p><p><img src="/blog/images/sublime/sidebar.png" alt></p><h2 id="SublimeCodeIntel-–-代码提示"><a href="#SublimeCodeIntel-–-代码提示" class="headerlink" title="SublimeCodeIntel – 代码提示"></a>SublimeCodeIntel – 代码提示</h2><p>这个就不用说了吧，效率必备。</p><h2 id="SublimeLinter-–-代码校验"><a href="#SublimeLinter-–-代码校验" class="headerlink" title="SublimeLinter – 代码校验"></a>SublimeLinter – 代码校验</h2><p>配合以下两个插件，可以对文件进行 <code>Eslint</code> 规则校验，让代码更漂亮、风格更统一。</p><h3 id="SublimeLinter-eslint-–-Eslint-语法校验"><a href="#SublimeLinter-eslint-–-Eslint-语法校验" class="headerlink" title="SublimeLinter-eslint – Eslint 语法校验"></a>SublimeLinter-eslint – Eslint 语法校验</h3><h3 id="SublimeLinter-json-–-JSON-检测"><a href="#SublimeLinter-json-–-JSON-检测" class="headerlink" title="SublimeLinter-json – JSON 检测"></a>SublimeLinter-json – JSON 检测</h3><h2 id="ESLint-Formatter-–-Eslint-fix"><a href="#ESLint-Formatter-–-Eslint-fix" class="headerlink" title="ESLint-Formatter – Eslint fix"></a>ESLint-Formatter – Eslint fix</h2><p>将不符合规则的代码格式化，不过，只能格式化简单的规则，如标点符号。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>应该要装吧。</p><h2 id="Git​Gutter-–-显示git信息"><a href="#Git​Gutter-–-显示git信息" class="headerlink" title="Git​Gutter – 显示git信息"></a>Git​Gutter – 显示git信息</h2><p>看图：</p><p><img src="/blog/images/sublime/gitgutter1.gif" alt></p><p><img src="/blog/images/sublime/gitgutter2.gif" alt></p><h2 id="Git-blame-–-Git-历史问责"><a href="#Git-blame-–-Git-历史问责" class="headerlink" title="Git blame – Git 历史问责"></a>Git blame – Git 历史问责</h2><p><code>vscode</code> 上有个<code>Gitlens</code>，可以在每行代码上显示上一次的<code>Git</code>提交记录。<code>Sublime Text</code> 上的 <code>Git blame</code> 同样可以实现此功能。代码责任到行，从此，不用担心甩锅（当然啦，可以查看具体的文件commit history）。该插件提供了快速查看某行或某文件上次修改历史记录的功能，十分方便。</p><h2 id="Color-Highlighter-–-颜色高亮"><a href="#Color-Highlighter-–-颜色高亮" class="headerlink" title="Color Highlighter – 颜色高亮"></a>Color Highlighter – 颜色高亮</h2><p><img src="/blog/images/sublime/colorhighlighte.png" alt></p><h2 id="Case-Conversion-–-格式转换"><a href="#Case-Conversion-–-格式转换" class="headerlink" title="Case Conversion – 格式转换"></a>Case Conversion – 格式转换</h2><p>将选中文本转换成目标格式，如 <code>snake_case</code>, <code>SCREAMING_SNAKE_CASE</code>, <code>camelCase</code>, <code>PascalCase</code>, <code>dot.case</code>等。</p><h2 id="DocBlockr-–-添加注释"><a href="#DocBlockr-–-添加注释" class="headerlink" title="DocBlockr – 添加注释"></a>DocBlockr – 添加注释</h2><p><img src="/blog/images/sublime/docblockr.gif" alt></p><h2 id="主题配色"><a href="#主题配色" class="headerlink" title="主题配色"></a>主题配色</h2><h3 id="Spacegray"><a href="#Spacegray" class="headerlink" title="Spacegray"></a>Spacegray</h3><ol><li><p>白色</p><p> <img src="/blog/images/sublime/spacegray1.png" alt></p></li><li><p>黑色</p><p> <img src="/blog/images/sublime/spacegray2.png" alt></p></li></ol><h3 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h3><p><img src="/blog/images/sublime/material.gif" alt></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>详细安装使用教程都可以在 <a href="https://packagecontrol.io/" target="_blank" rel="noopener">packagecontrol.io</a> 上找到，以上部分截图也是取自官方文档。暂时先记录到这里吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是对 Sublime Text 编辑器一些实用插件的总结，可以参考下。&lt;/p&gt;
    
    </summary>
    
      <category term="Editor" scheme="http://p2yang.github.io/categories/Editor/"/>
    
    
      <category term="Sublime Text" scheme="http://p2yang.github.io/tags/Sublime-Text/"/>
    
  </entry>
  
  <entry>
    <title>Node API - URL</title>
    <link href="http://p2yang.github.io/2018/05/15/node-url/"/>
    <id>http://p2yang.github.io/2018/05/15/node-url/</id>
    <published>2018-05-15T01:33:10.000Z</published>
    <updated>2018-05-15T01:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>URL</code> 提供了一系列 url 解析和处理方法。</p><a id="more"></a><p>说明：本文是基于 <a href="mailto:node@9.3.0" target="_blank" rel="noopener">node@9.3.0</a> 整理。 查看<a href="https://nodejs.org/docs/v9.3.0/api/url.html" target="_blank" rel="noopener">官方文档</a></p><h2 id="两种实践"><a href="#两种实践" class="headerlink" title="两种实践"></a>两种实践</h2><p>Node <code>url</code> 有两种实现实践形式。</p><h3 id="一-WHATWG-URL-标准"><a href="#一-WHATWG-URL-标准" class="headerlink" title="一. WHATWG URL 标准"></a>一. WHATWG URL 标准</h3><p>在 WHATWG 标准规范中定义了一个 <code>URL</code> 类，<code>new</code> 出一个示例后，就可以得到一系列解析值。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; URL &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> URL(<span class="string">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span>);</span><br></pre></td></tr></table></figure><ol><li><p>属性</p><p>得到的 <code>parsedUrl</code> 对象如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  href: &apos;https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash&apos;,</span><br><span class="line">  origin: &apos;https://sub.host.com:8080&apos;,</span><br><span class="line">  protocol: &apos;https:&apos;,</span><br><span class="line">  username: &apos;user&apos;,</span><br><span class="line">  password: &apos;pass&apos;,</span><br><span class="line">  host: &apos;sub.host.com:8080&apos;,</span><br><span class="line">  hostname: &apos;sub.host.com&apos;,</span><br><span class="line">  port: &apos;8080&apos;,</span><br><span class="line">  pathname: &apos;/p/a/t/h&apos;,</span><br><span class="line">  search: &apos;?query=string&apos;,</span><br><span class="line">  searchParams: URLSearchParams &#123; &apos;query&apos; =&gt; &apos;string&apos; &#125;,</span><br><span class="line">  hash: &apos;#hash&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这些属性都可以通过setter的方式赋值改写，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; URL &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> URL(<span class="string">'https://example.org'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myURL.protocol);</span><br><span class="line"><span class="comment">// Prints https:</span></span><br><span class="line"></span><br><span class="line">myURL.protocol = <span class="string">'ftp'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myURL.href);</span><br><span class="line"><span class="comment">// Prints ftp://example.org/</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><ul><li><p>url.format(url[, options])</p></li><li><p>url.domainToUnicode(domain)</p></li><li><p>url.domainToASCII(domain)</p></li></ul></li></ol><h3 id="二-Node-自实现"><a href="#二-Node-自实现" class="headerlink" title="二. Node 自实现"></a>二. Node 自实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"><span class="keyword">const</span> parsedUrl = url.parse(<span class="string">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span>)</span><br></pre></td></tr></table></figure><p>解析结果如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  protocol: <span class="string">'https:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'user:pass'</span>,</span><br><span class="line">  host: <span class="string">'sub.host.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'sub.host.com'</span>,</span><br><span class="line">  hash: <span class="string">'#hash'</span>,</span><br><span class="line">  search: <span class="string">'?query=string'</span>,</span><br><span class="line">  query: <span class="string">'query=string'</span>,</span><br><span class="line">  pathname: <span class="string">'/p/a/t/h'</span>,</span><br><span class="line">  path: <span class="string">'/p/a/t/h?query=string'</span>,</span><br><span class="line">  href: <span class="string">'https://user:pass@sub.host.com:8080/p/a/t/h?query=string#hash'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>urlObject 对象<br><code>url.parse</code> 方法解析后会返回一个 <code>urlObject</code> 对象，对象上即存在众多解析得到的属性值，示例如上所示。</p></li><li><p>方法</p><ul><li><p>url.format(urlObject)</p></li><li><p>url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</p></li><li><p>url.resolve(from, to)</p></li></ul></li></ol><h2 id="URLSearchParams-类"><a href="#URLSearchParams-类" class="headerlink" title="URLSearchParams 类"></a>URLSearchParams 类</h2><p>主要用于处理 <code>query</code> 字符串。</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p>参数可以是 <code>string</code>、<code>object</code>、<code>iterable</code>。简要示例如下，具体可以查看文档。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">const</span> &#123; URLSearchParams &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">let</span> params;</span><br><span class="line"></span><br><span class="line">params = <span class="keyword">new</span> URLSearchParams(<span class="string">'user=abc&amp;query=xyz'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(params.get(<span class="string">'user'</span>));</span><br><span class="line"><span class="comment">// Prints 'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(params.toString());</span><br><span class="line"><span class="comment">// Prints 'user=abc&amp;query=xyz'</span></span><br></pre></td></tr></table></figure><p>注意：参数中的 <code>?</code> 会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="keyword">const</span> &#123; URLSearchParams &#125; = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams(&#123;</span><br><span class="line">  user: <span class="string">'abc'</span>,</span><br><span class="line">  query: [<span class="string">'first'</span>, <span class="string">'second'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(params.getAll(<span class="string">'query'</span>));</span><br><span class="line"><span class="comment">// Prints [ 'first,second' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(params.toString());</span><br><span class="line"><span class="comment">// Prints 'user=abc&amp;query=first%2Csecond'</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="keyword">new</span> URLSearchParams([</span><br><span class="line">  [<span class="string">'user'</span>, <span class="string">'abc'</span>],</span><br><span class="line">  [<span class="string">'query'</span>, <span class="string">'first'</span>],</span><br><span class="line">  [<span class="string">'query'</span>, <span class="string">'second'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(params.toString());</span><br><span class="line"><span class="comment">// Prints 'user=abc&amp;query=first&amp;query=second'</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p>返回的对象具有通行的 ES6 对象方法，<code>toString</code></p><ol><li><p>ES6 对象方法<br><code>entries</code>、<code>keys</code>、<code>values</code></p></li><li><p>数组方法<br><code>forEach</code>、<code>sort</code></p></li><li><p>其他<br><code>set</code>, <code>get</code>, <code>getAll</code>, <code>delete</code>, <code>append</code>, <code>has</code>, <code>toString</code></p></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>很实用的工具。以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;URL&lt;/code&gt; 提供了一系列 url 解析和处理方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://p2yang.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>白用了那么多年的 ‘oh-my-zsh’ -- Plugins</title>
    <link href="http://p2yang.github.io/2018/03/22/zsh/"/>
    <id>http://p2yang.github.io/2018/03/22/zsh/</id>
    <published>2018-03-22T11:02:56.000Z</published>
    <updated>2018-03-22T11:02:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前虽然研究过 <code>Oh My Zsh</code> 的使用技巧，但都是在需求的驱动下进行的。换过多次主题，配过 Sublime Text 和 Git 等 alias命令，还有一些零散的配置。今天偶然看到其可以开启 web-search 功能，十分惊喜和好奇。浏览过官方 wiki 后，才发现有一些很实用的 plugins, 便记录下折腾过程吧。<br><a id="more"></a></p><h3 id="启动画面"><a href="#启动画面" class="headerlink" title="启动画面"></a>启动画面</h3><p>先来看一个启动画面：</p><p><img src="/blog/images/zsh/fbi.png" alt></p><p>哈哈，是不是有一种陌生的熟悉感！</p><p>如何配置呢？</p><ol><li>打开 .zshrc 配置文件</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="2"><li>加入一下配置</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.rvm/bin"</span> <span class="comment"># Add RVM to PATH for scripting</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">" FBI Warining "</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span>\033[41;37;5m FBI WARNING \033[0m"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"Ferderal Law provides severe civil and criminal penalties for"</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"the unauthorized reproduction, distribution, or exhibition of"</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"copyrighted motion pictures (Title 17, United States Code,"</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"Sections 501 and 508). The Federal Bureau of Investigation"</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"investigates allegations of criminal copyright infringement"</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">_COLUMNS=$(tput cols)</span><br><span class="line">_MESSAGE=<span class="string">"(Title 17, United States Code, Section 506)."</span></span><br><span class="line">y=$(( ( <span class="variable">$_COLUMNS</span> - <span class="variable">$&#123;#_MESSAGE&#125;</span> )  / 2 ))</span><br><span class="line">spaces=$(<span class="built_in">printf</span> <span class="string">"%-<span class="variable">$&#123;y&#125;</span>s"</span> <span class="string">" "</span>)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"<span class="variable">$&#123;spaces&#125;</span><span class="variable">$&#123;_MESSAGE&#125;</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">" "</span></span><br></pre></td></tr></table></figure><ol start="3"><li>应用生效<br>执行命令：</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>打开新的 shell 即可看到启动动画了。</p><h3 id="添加-Plugins"><a href="#添加-Plugins" class="headerlink" title="添加 Plugins"></a>添加 Plugins</h3><p>Oh My Zsh 内置了许多 Plugins, 直接添加配置即可。</p><p>修改 <code>~/.zshrc</code> 里的 plugin 属性，其默认值如下：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure><p>只需要在括号里以空格隔开添加 plugin 名即可，如</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git sublime web-search docker encode64 npm yarn node)</span><br></pre></td></tr></table></figure><p>默认支持的 plugins 可以查看 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">官方wiki</a>，描述很详细。</p><p>其中， <code>web-search</code> 添加了几种搜索命令，如 google, bing, baidu, github 等, 支持从终端进行搜索，如：</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google oh my zsh 是个啥</span><br></pre></td></tr></table></figure><p>执行该命令，会自动打开浏览器并搜索目标。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>保持好奇，总会发现许多有意思的东西，至于其作用，已经不重要了。毕竟，我们已经收获了探索的乐趣！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前虽然研究过 &lt;code&gt;Oh My Zsh&lt;/code&gt; 的使用技巧，但都是在需求的驱动下进行的。换过多次主题，配过 Sublime Text 和 Git 等 alias命令，还有一些零散的配置。今天偶然看到其可以开启 web-search 功能，十分惊喜和好奇。浏览过官方 wiki 后，才发现有一些很实用的 plugins, 便记录下折腾过程吧。&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://p2yang.github.io/categories/Tool/"/>
    
    
      <category term="Tool" scheme="http://p2yang.github.io/tags/Tool/"/>
    
      <category term="Terminal" scheme="http://p2yang.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>Gogs + Docker 搭建 Git 服务器实践</title>
    <link href="http://p2yang.github.io/2018/03/07/docker-gogs/"/>
    <id>http://p2yang.github.io/2018/03/07/docker-gogs/</id>
    <published>2018-03-07T04:59:00.000Z</published>
    <updated>2018-03-07T04:59:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是用 Gogs Docker 镜像快速搭建自己的 Git 服务器实践记录。</p><a id="more"></a><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><p>此次实践以 <code>Docker</code> 为主，以 <code>systemd</code> 守护进程。</p><p>相关文档</p><ul><li><a href="https://github.com/gogits/gogs/tree/master/docker" target="_blank" rel="noopener">Docker for Gogs</a></li><li><a href="https://gogs.io/docs/" target="_blank" rel="noopener">Gogs官方文档</a></li><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker官方文档</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gogs/gogs</span><br></pre></td></tr></table></figure><h4 id="创建本地资源文件"><a href="#创建本地资源文件" class="headerlink" title="创建本地资源文件"></a>创建本地资源文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/gogs</span><br></pre></td></tr></table></figure><h4 id="配置-service-文件"><a href="#配置-service-文件" class="headerlink" title="配置 service 文件"></a>配置 service 文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=gogs service</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Restart=always</span><br><span class="line">ExecStartPre=-/usr/bin/docker rm gogs</span><br><span class="line">ExecStart=/usr/bin/docker run \</span><br><span class="line">   --name gogs \</span><br><span class="line">   -v /var/gogs:/data/ \</span><br><span class="line">   -p 10022:22 \</span><br><span class="line">   -p 10080:3000 \</span><br><span class="line">   gogs/gogs</span><br><span class="line"></span><br><span class="line">ExecStop=/usr/bin/docker kill gogs</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start gogs</span><br></pre></td></tr></table></figure><p>至此，安装启动完成，访问 10080 端口即可！</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>访问 <code>http://ip:port</code> 配置gogs服务。</p><p>主要是配置 <code>数据库</code>、<code>域名</code>、<code>应用地址</code>。根据个人情况配置如下，其他默认：<br>数据库：SQLite3<br>域名：git.p2yang.com<br>应用地址：<a href="http://git.p2yang.com" target="_blank" rel="noopener">http://git.p2yang.com</a></p><p>访问 git.p2yang.com:10080， 结果如图所示<br><img src="/blog/images/gogs.png" alt="gogs"></p><h3 id="配置nginx反向代理"><a href="#配置nginx反向代理" class="headerlink" title="配置nginx反向代理"></a>配置nginx反向代理</h3><p>nginx 增加配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    server_name git.p2yang.com</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://139.196.54.203:10080;</span><br><span class="line">        proxy_set_header Host $host:80;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>监听<code>80</code>端口，代理到服务器<code>10080</code>端口。</p><ul><li>注意：如果是<code>nginx + docker</code> 容器起的服务，此处 <code>proxy_pass</code> 的值须采用<code>ip</code>.</li></ul><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>实现中…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是用 Gogs Docker 镜像快速搭建自己的 Git 服务器实践记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://p2yang.github.io/tags/git/"/>
    
      <category term="docker" scheme="http://p2yang.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>parcel-vue环境下pug支持实践</title>
    <link href="http://p2yang.github.io/2018/01/30/parcel-vue-pug/"/>
    <id>http://p2yang.github.io/2018/01/30/parcel-vue-pug/</id>
    <published>2018-01-30T01:18:42.000Z</published>
    <updated>2018-01-30T01:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>parcel-plugin-vue</code> 插件默认没有实现此功能，需要我们自己写配置。其默认转换工具是 <code>vueify</code>, 根据文档资料，本文记录下实现 pug 支持的基本步骤。</p><a id="more"></a><h2 id="添加配置文件-vue-config-js"><a href="#添加配置文件-vue-config-js" class="headerlink" title="添加配置文件 vue.config.js"></a>添加配置文件 <strong><em>vue.config.js</em></strong></h2><p>在根目录下新建配置文件 <strong><em>vue.config.js</em></strong>，添加pug解析方法，具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="keyword">const</span> pug = <span class="built_in">require</span>(<span class="string">'pug'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    customCompilers: &#123;</span><br><span class="line">        pug (content, cb) &#123;</span><br><span class="line">            <span class="keyword">const</span> html = pug.render(content)</span><br><span class="line">            cb(<span class="literal">null</span>, html)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体配置说明请查看<a href="https://github.com/vuejs/vueify#configuring-options" target="_blank" rel="noopener">文档</a>.</p></blockquote><h2 id="添加依赖-pug"><a href="#添加依赖-pug" class="headerlink" title="添加依赖 pug"></a>添加依赖 <code>pug</code></h2><p>需要 <code>pug</code> 来解析, 所以添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add pug --dev</span><br></pre></td></tr></table></figure></p><h2 id="使用pug语法"><a href="#使用pug语法" class="headerlink" title="使用pug语法"></a>使用pug语法</h2><p>现在就可以在。vue文件中书写pug语法了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;pug&quot;&gt;</span><br><span class="line">  h1 parcel vue</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure></p><p>–<br>到此，大功告成！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;parcel-plugin-vue&lt;/code&gt; 插件默认没有实现此功能，需要我们自己写配置。其默认转换工具是 &lt;code&gt;vueify&lt;/code&gt;, 根据文档资料，本文记录下实现 pug 支持的基本步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="parcel" scheme="http://p2yang.github.io/tags/parcel/"/>
    
      <category term="vue" scheme="http://p2yang.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Parcel 开启三大CSS预处理器--Stylus/Less/Sass</title>
    <link href="http://p2yang.github.io/2018/01/26/parcel-step-2/"/>
    <id>http://p2yang.github.io/2018/01/26/parcel-step-2/</id>
    <published>2018-01-26T11:59:28.000Z</published>
    <updated>2018-01-26T11:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Parcel 默认支持 Stylus/Less/Sass, 只不过需要安装对应的npm依赖。官方文档言语模糊，我们这里便来实践一下具体如何开启tylus/Less/Sass。</p><a id="more"></a><h2 id="支持-stylus"><a href="#支持-stylus" class="headerlink" title="支持 stylus"></a>支持 <strong>stylus</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add stylus --dev</span><br></pre></td></tr></table></figure><p>如在 App.vue 同目录下新建<strong><em>style.styl</em></strong> 样式文件, 然后引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// template 和 script 内容略过</span><br><span class="line">&lt;style lang=&quot;stylus&quot;&gt;</span><br><span class="line">@import &apos;./style&apos;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>启动，会看到 Parcel 默认将样式文件内联到<code>&lt;head&gt;</code>标签中。</p><h2 id="支持-less"><a href="#支持-less" class="headerlink" title="支持 less"></a>支持 <strong>less</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add less --dev</span><br></pre></td></tr></table></figure><p>如在 App.vue 同目录下新建<strong><em>style.less</em></strong> 样式文件, 然后引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// template 和 script 内容略过</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">@import &apos;./style&apos;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="支持-sass"><a href="#支持-sass" class="headerlink" title="支持 sass"></a>支持 <strong>sass</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add node-sass --dev</span><br></pre></td></tr></table></figure><p>如在 App.vue 同目录下新建<strong><em>style.scss</em></strong> 样式文件, 然后引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// template 和 script 内容略过</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">@import &apos;./style&apos;;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：上述如果启动失败，可以重装 <code>babel-preset-env</code> 依赖。</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实践过程中发现一个问题： 在vue 组件 <code>&lt;style&gt;</code> 中，通过 <code>@import</code>引入样式文件后，修改样式文件 HMR 失效。 这是个让人很受伤的问题。该问题是<code>parcel-plugin-vue</code>(<a href="https://github.com/BoltDoggy/parcel-plugin-vue/issues/18" target="_blank" rel="noopener">查看issue18</a>) 导致的，目前还未解决。</p><p>我们这里可以先在vue 组件的 <code>&lt;script&gt;</code>中将样式 import 进来， HMR有效。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Parcel 默认支持 Stylus/Less/Sass, 只不过需要安装对应的npm依赖。官方文档言语模糊，我们这里便来实践一下具体如何开启tylus/Less/Sass。&lt;/p&gt;
    
    </summary>
    
    
      <category term="parcel" scheme="http://p2yang.github.io/tags/parcel/"/>
    
      <category term="vue" scheme="http://p2yang.github.io/tags/vue/"/>
    
      <category term="css" scheme="http://p2yang.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Parcel + Vue 尝鲜</title>
    <link href="http://p2yang.github.io/2018/01/24/parcel-vue/"/>
    <id>http://p2yang.github.io/2018/01/24/parcel-vue/</id>
    <published>2018-01-24T11:46:26.000Z</published>
    <updated>2018-01-24T11:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Webpack 久负盛名，包罗万象。若是用其造轮子的话，难免修修补补。年前兴起了Parcel打包工具，号称“极速零配置”，让人不胜向往。这不得空了，就来尝尝鲜，记录下如何使用 Parcel + Vue进行开发。</p><a id="more"></a><p>这里是<a href="https://github.com/p2yang/parcel-vue" target="_blank" rel="noopener">示例代码</a>!</p><h2 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h2><h3 id="两个依赖"><a href="#两个依赖" class="headerlink" title="两个依赖"></a>两个依赖</h3><ul><li><p><code>parcel-bundler</code>(<a href="https://www.npmjs.com/package/parcel-bundler" target="_blank" rel="noopener">戳我👇</a>)<br>这是 <strong><em>Parcel</em></strong> 打包工具，“极速零配置”的起源。</p></li><li><p><code>parcel-plugin-vue</code>(<a href="https://www.npmjs.com/package/parcel-plugin-vue" target="_blank" rel="noopener">戳我👇</a>)<br>这是一个 parcel 插件，使 pacel 支持 <code>.vue</code> 文件。</p></li></ul><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parcel-vue</span><br><span class="line">├── package.json</span><br><span class="line">├── .babelrc</span><br><span class="line">├── index.html</span><br><span class="line">├──src</span><br><span class="line">   ├── App.vue</span><br><span class="line">   ├── main.js</span><br></pre></td></tr></table></figure><p>这是基本的项目结构。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol><li><p>安装parcel相关开发依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add parcel-bundler parcel-plugin-vue babel-preset-env -D</span><br></pre></td></tr></table></figure></li><li><p>安装vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue</span><br></pre></td></tr></table></figure></li><li><p>添加入口文件 <code>index.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;parcel + vue&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;./src/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加脚本内容 <code>main.js</code> 和 vue组件 <code>App.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ./src/main.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import App from &apos;./App&apos;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;parcel vue&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置 <code>.babelrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    &quot;env&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>大功告成！！！</p><p>额，再加条启动脚本吧！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  ...,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;parcel index.html&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Node执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure></p><p>好了，浏览器打开<a href="http://localhost:1234看看吧。" target="_blank" rel="noopener">http://localhost:1234看看吧。</a></p><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>构建生产环境，只需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel build index.html --public-url ./</span><br></pre></td></tr></table></figure></p><p>这里以index.html为入口，parcel会自动识别和提取相关依赖资源，并在根目录下创建 <code>dist</code> 文件夹。这里 <code>dist</code> 名称是默认的，可以按意愿更改。可以通过命令 <code>parcel build -h</code> 查看具体的参数列表。</p><p>查看<a href="https://github.com/p2yang/parcel-vue" target="_blank" rel="noopener">示例代码</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Webpack 久负盛名，包罗万象。若是用其造轮子的话，难免修修补补。年前兴起了Parcel打包工具，号称“极速零配置”，让人不胜向往。这不得空了，就来尝尝鲜，记录下如何使用 Parcel + Vue进行开发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="parcel" scheme="http://p2yang.github.io/tags/parcel/"/>
    
      <category term="vue" scheme="http://p2yang.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
